/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ca_uwaterloo_JCLCudaAPI_CudaDevice */

#ifndef _Included_ca_uwaterloo_JCLCudaAPI_CudaDevice
#define _Included_ca_uwaterloo_JCLCudaAPI_CudaDevice
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    init
 * Signature: (Lca/uwaterloo/JCLCudaAPI/CudaPlatform;I)V
 */
JNIEXPORT void JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_init
  (JNIEnv *, jobject, jobject, jint);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    version
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_version
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    vendor
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_vendor
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    name
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_name
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    type
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_type
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    maxWorkGroupSize
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_maxWorkGroupSize
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    maxWorkItemDimensions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_maxWorkItemDimensions
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    maxWorkItemSizes
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_maxWorkItemSizes
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    localMemSize
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_localMemSize
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    capabilities
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_capabilities
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    coreClock
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_coreClock
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    computeUnits
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_computeUnits
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    memorySize
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_memorySize
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    maxAllocSize
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_maxAllocSize
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    memoryClock
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_memoryClock
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    memoryBusWidth
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_memoryBusWidth
  (JNIEnv *, jobject);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    isLocalMemoryValid
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_isLocalMemoryValid
  (JNIEnv *, jobject, jlong);

/*
 * Class:     ca_uwaterloo_JCLCudaAPI_CudaDevice
 * Method:    isThreadConfigValid
 * Signature: (Ljava/util/List;)Z
 */
JNIEXPORT jboolean JNICALL Java_ca_uwaterloo_JCLCudaAPI_CudaDevice_isThreadConfigValid
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
